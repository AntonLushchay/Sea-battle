{
	// Наследует все настройки из базового конфигурационного файла.
	"extends": "../../tsconfig.base.json",

	// Указывает, что в данный проект входят только файлы из директории "src".
	"include": ["src"],

	// Устанавливает связь с другим проектом в монорепозитории (в данном случае, с 'shared').
	// Позволяет TypeScript понимать зависимости между пакетами и правильно собирать их.
	"references": [{ "path": "../shared" }],

	"compilerOptions": {
		// Определяет набор встроенных библиотек типов. "DOM" и "DOM.Iterable" добавляют типы для браузерного окружения (window, document и т.д.).
		"lib": ["ES2022", "DOM", "DOM.Iterable"],

		// Указывает, какой стандарт модулей использовать. "ESNext" - самый современный стандарт ES-модулей, подходящий для сборщиков (Vite, Webpack).
		"module": "ESNext",

		// Указывает TypeScript использовать стратегию разрешения модулей, как у современных сборщиков.
		// Он ожидает, что импорты вроде './file.ts' будут обработаны сборщиком.
		"moduleResolution": "bundler",

		// Использует стандартный способ определения полей класса в ECMAScript вместо старого поведения TypeScript.
		"useDefineForClassFields": true,

		// Разрешает писать импорты с расширением .ts (например, `import './file.ts'`). Требуется для `moduleResolution: "bundler"`.
		"allowImportingTsExtensions": true,

		// Требует явно указывать `import type` для импорта только типов. Устраняет неоднозначность и помогает сборщикам лучше оптимизировать код.
		"verbatimModuleSyntax": true,

		// Гарантирует, что каждый файл рассматривается как модуль (имеет свою область видимости), а не как глобальный скрипт.
		"moduleDetection": "force",

		// Запрещает компилятору TypeScript создавать JavaScript файлы.
		// Это правильно, так как за компиляцию и сборку в данном случае отвечает Vite.
		"noEmit": true
	}
}
